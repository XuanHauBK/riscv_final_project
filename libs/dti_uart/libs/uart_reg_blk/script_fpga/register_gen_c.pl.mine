#!/usr/bin/perl
#-----------------------------------------------------------------------------
#    Copyright (C) 2015 by Dolphin Technology
#    All right reserved.
#
#    Copyright Notification
#    No part may be reproduced except as authorized by written permission.
#
#    File: reg_fpga.pl
#    Project: dti_uart
#    Author: Hyunken10
#    Created: 01-04-2019
#    Description:
#    Read - Modify - Write Control
#
#    History:
#    Date ------------ By ------------ Change Description
#    01-07-2017        Tung            Created
#------------------------------------------------------------------------------

# Library
  use Cwd;
  use Time::Local;
  use strict;
  use Spreadsheet::Read;   # Read the data from a spreadsheet
  use Spreadsheet::ParseExcel;
  use Spreadsheet::XLSX;
  use OpenOffice::OODoc;
#  use Win32::Word::Writer; # Manupulate MS doc OLE based.

# Log file
  open (my $log_fh, ">rb_gen.log") || die "Can't open new file: $! rb_gen.log\n";

# Sub Main Function ----------------------------------------------------------
  sub main {
    my  $rb_sheet       = $_[0];
    my  @rb_sheet_array = @{getSheetInfo($rb_sheet)};
    
    print  "successful Register Validation!\n";
    
    rbRegisterGen(\@rb_sheet_array);
    # rbApbBridgeGen();
    # rbDerivativeRegGen(\@rb_sheet_array);
    # rbTopBlockGen(\@rb_sheet_array);
    # rbRegStructGen(\@rb_sheet_array);
    # rbDefMSD ocGen(\@rb_sheet_array);
  }
  
# Main Function ----------------------------------------------------------
  main(@ARGV);

#------------------------------------------------------------------------#
# GetSheetInfo Function
#------------------------------------------------------------------------#
  # Function Description
  # Parameters:
  #   $_[0]: Parameter Description
  # Return:
  #   None
  sub getSheetInfo (@) {
    my $rb_sheet_file   = $_[0];
    my $rb_sheet_array  = ReadData ("$rb_sheet_file");
    
    my      @rb_def_array;
    undef   @rb_def_array;
    
    my %sheet_ctrl_hash = %{$rb_sheet_array->[0]};
    
    $rb_def_array[0]{'sheet_no'}        = $sheet_ctrl_hash{'sheets'};
    $rb_def_array[0]{'sheet_type'}      = $sheet_ctrl_hash{'type'};
    $rb_def_array[0]{'sheet_parser'}    = $sheet_ctrl_hash{'parser'};
    $rb_def_array[0]{'sheet_ver'}       = $sheet_ctrl_hash{'version'};
    
    my $sheet_index = 0;        # Index of sheets
    my $sheet_row   = 0;        # Index of rows in a sheet
    my $sheet_col   = 0;        # Index of columns in a sheet
    my $reg_no      = 0;        # Number of registers
    my $field_index = 0;        # Index of register's fields
    
    $sheet_index    = 1;
    $reg_no         = 0;
    $field_index    = 0;
    
    my $sheet_label = $rb_sheet_array->[$sheet_index]{'label'};
    $rb_def_array[$sheet_index]{'sheet_label'} = $sheet_label;
    
    for ($sheet_row = 2; $sheet_row <= $rb_sheet_array->[$sheet_index]{'maxrow'}; $sheet_row++) {
      
      # Col 2: Register Name
      if ( $rb_sheet_array->[$sheet_index]{'cell'}[2][$sheet_row] ) {
        $reg_no++;
        $field_index = 0;
        $rb_def_array[$sheet_index]{'reg'}[$reg_no]{'reg_name'} = $rb_sheet_array->[$sheet_index]{'cell'}[2][$sheet_row];
    print "$rb_def_array[$sheet_index]{'reg'}[$reg_no]{'reg_name'} - ";
      }
      
      # Col 3: Register Description
      if ( $rb_sheet_array->[$sheet_index]{'cell'}[3][$sheet_row] ) {
        $rb_def_array[$sheet_index]{'reg'}[$reg_no]{'reg_des'} = $rb_sheet_array->[$sheet_index]{'cell'}[3][$sheet_row];
      }
      
      # Col 4: Register Address(Hex)
      if ( $rb_sheet_array->[$sheet_index]{'cell'}[4][$sheet_row] ne "") {
        $rb_def_array[$sheet_index]{'reg'}[$reg_no]{'reg_addr'} = $rb_sheet_array->[$sheet_index]{'cell'}[4][$sheet_row];
    print "$rb_def_array[$sheet_index]{'reg'}[$reg_no]{'reg_addr'} \n";
      }
      
      # Col 5: Number of Instances
      if ( $rb_sheet_array->[$sheet_index]{'cell'}[5][$sheet_row] ) {
        $rb_def_array[$sheet_index]{'reg'}[$reg_no]{'num_inst'} = $rb_sheet_array->[$sheet_index]{'cell'}[5][$sheet_row];
      }
      
      # Col 6: Suffix
      if ( $rb_sheet_array->[$sheet_index]{'cell'}[6][$sheet_row] ) {
        $rb_def_array[$sheet_index]{'reg'}[$reg_no]{'suffix'} = $rb_sheet_array->[$sheet_index]{'cell'}[6][$sheet_row];
      }
      
      # Col 7: Register Width
      if ( $rb_sheet_array->[$sheet_index]{'cell'}[7][$sheet_row] ) {
        $rb_def_array[$sheet_index]{'reg'}[$reg_no]{'reg_width'} = $rb_sheet_array->[$sheet_index]{'cell'}[7][$sheet_row];
      }
      
      # Col 8: Reset Value
      if ( $rb_sheet_array->[$sheet_index]{'cell'}[8][$sheet_row] ) {
        $rb_def_array[$sheet_index]{'reg'}[$reg_no]{'rst_value'} = $rb_sheet_array->[$sheet_index]{'cell'}[8][$sheet_row];
      }
      
      # Col 9: Register SW Access
      if ( $rb_sheet_array->[$sheet_index]{'cell'}[9][$sheet_row] ) {
        $rb_def_array[$sheet_index]{'reg'}[$reg_no]{'reg_access'} = $rb_sheet_array->[$sheet_index]{'cell'}[9][$sheet_row];
      }
      
      # Col 10: Register Field
      if ( $rb_sheet_array->[$sheet_index]{'cell'}[10][$sheet_row] ) {
        $field_index++;
        
        # Field Name
        $rb_def_array[$sheet_index]{'reg'}[$reg_no]{'reg_field'}[$field_index]{'field_name'}  = $rb_sheet_array->[$sheet_index]{'cell'}[10][$sheet_row];
        
        # Field Description
        $rb_def_array[$sheet_index]{'reg'}[$reg_no]{'reg_field'}[$field_index]{'field_des'}   = $rb_sheet_array->[$sheet_index]{'cell'}[11][$sheet_row];
        
        # Field Offset
        $rb_def_array[$sheet_index]{'reg'}[$reg_no]{'reg_field'}[$field_index]{'field_off'}   = $rb_sheet_array->[$sheet_index]{'cell'}[12][$sheet_row];
        
        # Field Width
        $rb_def_array[$sheet_index]{'reg'}[$reg_no]{'reg_field'}[$field_index]{'field_width'} = $rb_sheet_array->[$sheet_index]{'cell'}[13][$sheet_row];
        
        # Field Reset Value
        $rb_def_array[$sheet_index]{'reg'}[$reg_no]{'reg_field'}[$field_index]{'field_reset'} = $rb_sheet_array->[$sheet_index]{'cell'}[14][$sheet_row];
        $rb_def_array[$sheet_index]{'reg'}[$reg_no]{'reg_field'}[$field_index]{'field_reset'} =~ s/\&apos;/'/g;
        
        # Field SW Access
        $rb_def_array[$sheet_index]{'reg'}[$reg_no]{'reg_field'}[$field_index]{'field_swacc'} = $rb_sheet_array->[$sheet_index]{'cell'}[15][$sheet_row];
        
        # Field HW Access
        $rb_def_array[$sheet_index]{'reg'}[$reg_no]{'reg_field'}[$field_index]{'field_hwacc'} = $rb_sheet_array->[$sheet_index]{'cell'}[16][$sheet_row];
        
        # Field I/O Type
        $rb_def_array[$sheet_index]{'reg'}[$reg_no]{'reg_field'}[$field_index]{'field_io'}    = $rb_sheet_array->[$sheet_index]{'cell'}[17][$sheet_row];
        
        # Simulation Value
        $rb_def_array[$sheet_index]{'reg'}[$reg_no]{'reg_field'}[$field_index]{'sim_value'}   = $rb_sheet_array->[$sheet_index]{'cell'}[18][$sheet_row];
        $rb_def_array[$sheet_index]{'reg'}[$reg_no]{'reg_field'}[$field_index]{'sim_value'} =~ s/\&apos;/'/g;
        
        # Field Derivation
        $rb_def_array[$sheet_index]{'reg'}[$reg_no]{'reg_field'}[$field_index]{'field_deriv'}    = $rb_sheet_array->[$sheet_index]{'cell'}[19][$sheet_row];
      }
    }
    
    # User Command Description
    $sheet_index = 2;
    my $cmd_no      = 0;
    for ($sheet_row = 2; $sheet_row <= $rb_sheet_array->[$sheet_index]{'maxrow'}; $sheet_row++) {
      # Command
      if ( $rb_sheet_array->[$sheet_index]{'cell'}[1][$sheet_row] ) {
        $cmd_no ++;
        $rb_def_array[$sheet_index]{'cmd'}[$cmd_no]{'cmd_name'} = $rb_sheet_array->[$sheet_index]{'cell'}[1][$sheet_row];
      }
      # Opcode
      if ( $rb_sheet_array->[$sheet_index]{'cell'}[2][$sheet_row] ) {
        $rb_def_array[$sheet_index]{'cmd'}[$cmd_no]{'cmd_op'} = $rb_sheet_array->[$sheet_index]{'cell'}[2][$sheet_row];
      }
      # Description
      if ( $rb_sheet_array->[$sheet_index]{'cell'}[3][$sheet_row] ) {
        $rb_def_array[$sheet_index]{'cmd'}[$cmd_no]{'cmd_des'} = $rb_sheet_array->[$sheet_index]{'cell'}[3][$sheet_row];
      }
    }
    
    return \@rb_def_array;
  }
  
#------------------------------------------------------------------------#
# rbRegisterGen Function
#------------------------------------------------------------------------#
  # Generate register.c, Register Block Register File module
  # Parameters:
  #   $_[0]: Register Definition Array
  # Return:
  #   None
  
  sub rbRegisterGen (@) {
    my @reg_def_array    = @{$_[0]};
    
    my $register_filename = "../fpga/hdl/register.c";
    open (my $register_fh, ">$register_filename") || die "Can't open new file: $! $register_filename\n";
    

  
  
    # Header
    printHeader($register_fh, $register_filename, "Register File");

    # Module Declaration
    print $register_fh "/***************************** Include Files ****************************************/ \n";
    print $register_fh "#include \"../header/register.h\"\n";


    
    my @reg_array;   undef @reg_array;
  # Collect all derivative registers
    my @deriv_array; undef @deriv_array;
    
    my $sheet_index     = 1;
    
    @reg_array = @{$reg_def_array[$sheet_index]{'reg'}};
    
  # Gen Constant Definitions 
  
    for ( my $reg_index = 1; $reg_index <= $#reg_array; $reg_index++ ) {
      my @reg_field = @{$reg_array[$reg_index]{'reg_field'}};
      my $inst_no   = $reg_array[$reg_index]{'num_inst'};
      my $inst_suffix = $reg_array[$reg_index]{'suffix'};
      
      for ( my $inst_index = 0; $inst_index < $inst_no; $inst_index++) {
        my $name_ext = ( $inst_no > 1 ) ? "_"."$inst_suffix"."$inst_index" : "";
        for ( my $field_index = 1; $field_index <= $#reg_field; $field_index++ ) {
          if ( $reg_field[$field_index]{'field_deriv'} && ($reg_field[$field_index]{'field_deriv'} !~ /no_divide/)) {
            my $deriv_name = $reg_field[$field_index]{'field_deriv'};
            # Detect if the register existed
            my $existed = 0;
            if ( @deriv_array ) {
              for ( my $deriv_index = 1; $deriv_index <= $#deriv_array; $deriv_index++ ) {
                if ( $deriv_array[$deriv_index]{'deriv_name'} eq $deriv_name ) {
                  my @deriv_field = @{$deriv_array[$deriv_index]{'deriv_field'}};
                  $deriv_array[$deriv_index]{'deriv_width'}                                  += $reg_field[$field_index]{'field_width'};
                  if ( $reg_index == $#reg_array ) {
                    $deriv_array[$deriv_index]{'deriv_field'}[$#deriv_field + 1]{'field_name'}  = "$reg_field[$field_index]{'field_name'}"."$name_ext";
                  }
                  else {
                    $deriv_array[$deriv_index]{'deriv_field'}[$#deriv_field + 1]{'field_name'}  = "$reg_array[$reg_index]{'reg_name'}"."$name_ext"."_"."$reg_field[$field_index]{'field_name'}";
                  }
                  $existed = 1;
                  last;
                }
              }
              # New Derivative Register
              if ( $existed == 0 ) {
                my $deriv_num = $#deriv_array;
                $deriv_array[$deriv_num + 1]{'deriv_name'}                   = $deriv_name;
                $deriv_array[$deriv_num + 1]{'deriv_inst'}                   = $inst_no;
                $deriv_array[$deriv_num + 1]{'deriv_width'}                  = $reg_field[$field_index]{'field_width'};
                if ( $reg_index == $#reg_array ) {
                  $deriv_array[$deriv_num + 1]{'deriv_field'}[1]{'field_name'} = "$reg_field[$field_index]{'field_name'}"."$name_ext";
                }
                else {
                  $deriv_array[$deriv_num + 1]{'deriv_field'}[1]{'field_name'} = "$reg_array[$reg_index]{'reg_name'}"."$name_ext"."_"."$reg_field[$field_index]{'field_name'}";
                }
                if ( $reg_field[$field_index]{'field_hwacc'} =~ /R(O|W)/ ) {
                  $deriv_array[$deriv_num + 1]{'deriv_io'} = "Output";
                }
                if ( $reg_field[$field_index]{'field_hwacc'} =~ /WO/ ) {
                  $deriv_array[$deriv_num + 1]{'deriv_io'} = "Input";
                }
              }
            }
            # First Derivative Register
            else {
              $deriv_array[1]{'deriv_name'}                   = $deriv_name;
              $deriv_array[1]{'deriv_inst'}                   = $inst_no;
              $deriv_array[1]{'deriv_width'}                  = $reg_field[$field_index]{'field_width'};
              if ( $reg_index == $#reg_array ) {
                $deriv_array[1]{'deriv_field'}[1]{'field_name'} = "$reg_field[$field_index]{'field_name'}"."$name_ext";
              }
              else {
                $deriv_array[1]{'deriv_field'}[1]{'field_name'} = "$reg_array[$reg_index]{'reg_name'}"."$name_ext"."_"."$reg_field[$field_index]{'field_name'}";
              }
              if ( $reg_field[$field_index]{'field_hwacc'} =~ /R(O|W)/ ) {
                $deriv_array[1]{'deriv_io'} = "Output";
              }
              if ( $reg_field[$field_index]{'field_hwacc'} =~ /WO/ ) {
                $deriv_array[1]{'deriv_io'} = "Input";
              }
            }
          }
      else{
      my $width           = $reg_field[$field_index]{'field_width'} - 1;
          my $reg_field_width = ($width > 0) ? "[$width:0]" : "";
          
          # New line in Description
          my $cmt_new_line   = "\n";
          my $cmt_apos       = "&apos;";
          my $description    = $reg_field[$field_index]{'field_des'};
          my $cmt_space      = " " x 61;
          $description    =~ s/$cmt_new_line/\n$cmt_space\/\/ /g;
          $description    =~ s/$cmt_apos/\'/g;
          my $signal_name = "";
          $signal_name = "$reg_array[$reg_index]{'reg_name'}"."$name_ext"."_"."$reg_field[$field_index]{'field_name'}";

          if ( $reg_field[$field_index]{'field_hwacc'} =~ /W/ ) {
          }
          if ( $reg_field[$field_index]{'field_hwacc'} =~ /RO/ ) {
          }
      if ( $reg_field[$field_index]{'field_hwacc'} =~ /RW/ ) {
          }
      }
        }
      }
    }
  
  # print $register_fh "//Derivative Signals\n";
    for ( my $reg_index = 1; $reg_index <= $#reg_array; $reg_index++ ) {
      my @reg_field = @{$reg_array[$reg_index]{'reg_field'}};
      my $inst_no   = $reg_array[$reg_index]{'num_inst'};
      my $inst_suffix = $reg_array[$reg_index]{'suffix'};
      for ( my $inst_index = 0; $inst_index < $inst_no; $inst_index++) {
        my $name_ext = ( $inst_no > 1 ) ? "_"."$inst_suffix"."$inst_index" : "";
        for ( my $field_index = 1; $field_index <= $#reg_field; $field_index++ ) {
          if ( $reg_field[$field_index]{'field_deriv'} && ($reg_field[$field_index]{'field_deriv'} !~ /no_divide/)) {
            my $width           = $reg_field[$field_index]{'field_width'} - 1;
            my $reg_field_width = ($width > 0) ? "[$width:0]" : "";
            my $signal_name     = "";
              $signal_name = "$reg_array[$reg_index]{'reg_name'}"."$name_ext"."_"."$reg_field[$field_index]{'field_name'}";
            if ( $reg_field[$field_index]{'field_hwacc'} =~ /R(O|W)/ ) {
            }
            if ( $reg_field[$field_index]{'field_hwacc'} =~ /WO/ ) {
            }
          }
        }
      }
    }

    print $register_fh "\n", "/************************** Variable Definitions *****************************/"."\n";

    for ( my $reg_index = 1; $reg_index <= $#reg_array; $reg_index++ ) {
      my @reg_field = @{$reg_array[$reg_index]{'reg_field'}};
      my $inst_no   = $reg_array[$reg_index]{'num_inst'};
      my $inst_suffix = $reg_array[$reg_index]{'suffix'};
      
      # New line in Description
      my $cmt_space     = sprintf("%18s", "");
      my $reg_des       = $reg_array[$reg_index]{'reg_des'};
      $reg_des          =~ s/\n/\/\/$cmt_space/g;
      if ( $reg_array[$reg_index]{'reg_name'} =~ /^NA$/ ) {}
      else {

      for ( my $inst_index = 0; $inst_index < $inst_no; $inst_index++) {
        my $name_ext    = ( $inst_no > 1 ) ? "_"."$inst_suffix"."$inst_index" : "";
        # Address of the instance
        my $inst_addr_dec = 0;
        $inst_addr_dec = hex($reg_array[$reg_index]{'reg_addr'}) + 4*$inst_index;
        
        my $inst_addr_hex = uc(sprintf("%03x", $inst_addr_dec));
        

        print $register_fh "reg_"; print $register_fh "$reg_array[$reg_index]{'reg_name'}"."$name_ext"; print $register_fh "_t"; 
       print $register_fh " reg_"; print $register_fh "$reg_array[$reg_index]{'reg_name'}"."$name_ext"; print $register_fh ";\n";
        
        # Procedural Blocks For Register Fields
        for ( my $field_index = 1; $field_index <= $#reg_field; $field_index++ ) {
          # New line in Description
          my $cmt_space   = sprintf("%18s", "");
          my $field_des   = $reg_field[$field_index]{'field_des'};
          $field_des      =~ s/\n/\/\/$cmt_space/g;
          
          # Procedural Blocks
          my $reg_field_name = "$reg_array[$reg_index]{'reg_name'}"."$name_ext"."_"."$reg_field[$field_index]{'field_name'}";
          my $proc_name = uc($reg_field_name)."_PROC";
          

          
        }
      }
      }
    }


# /************************** Function Definitions ******************************/
# // Read from a register by address


    print $register_fh "\n", "/************************** Function Definitions ******************************/"."\n";
    print $register_fh "//Read from a register by address"."\n";
    print $register_fh "void read_reg(u32 addr, u32 *data_u) {"."\n";
    print $register_fh "  *data_u = Xil_In32(addr);"."\n";
    print $register_fh "//OR: *data_u = *addr;"."\n";
    print $register_fh "}"."\n";

# // Write to a register by address


    print $register_fh "\n", "// Write to a register by address"."\n";
    print $register_fh "void write_reg(u32 addr, u32 data_u) {"."\n";
    print $register_fh "  Xil_Out32(addr, data_u);"."\n";
    print $register_fh "//OR: *data_u = *addr;"."\n";
    print $register_fh "}"."\n";


# // Extract field value from @data base on its @mask and @offset

    print $register_fh "\n","void get_field(RegField *field, u32 data_u) {"."\n";
    print $register_fh "  field->value = (data_u & field->mask) >> field->offset;"."\n";
    print $register_fh "}"."\n";
    print $register_fh "\n";




# void set_field_uci(RegField *field, u32 value) {

    for ( my $reg_index = 1; $reg_index <= $#reg_array; $reg_index++ ) {
      my @reg_field = @{$reg_array[$reg_index]{'reg_field'}};
      my $inst_no   = $reg_array[$reg_index]{'num_inst'};
      my $inst_suffix = $reg_array[$reg_index]{'suffix'};
      
      # New line in Description
      my $cmt_space     = sprintf("%18s", "");
      my $reg_des       = $reg_array[$reg_index]{'reg_des'};
      $reg_des          =~ s/\n/\/\/$cmt_space/g;
      if ( $reg_array[$reg_index]{'reg_name'} =~ /^NA$/ ) {}
      else {

      for ( my $inst_index = 0; $inst_index < $inst_no; $inst_index++) {
        my $name_ext    = ( $inst_no > 1 ) ? "_"."$inst_suffix"."$inst_index" : "";
        # Address of the instance
        my $inst_addr_dec = 0;
        $inst_addr_dec = hex($reg_array[$reg_index]{'reg_addr'}) + 4*$inst_index;
        
        my $inst_addr_hex = uc(sprintf("%03x", $inst_addr_dec));
        

        print $register_fh "void set_field_"; print $register_fh ""."$reg_array[$reg_index]{'reg_name'}"."$name_ext";print $register_fh "(RegField *field, u32 value) { \n";
        print $register_fh "  field->value = value; \n";
        print $register_fh "  reg_";print $register_fh ""."$reg_array[$reg_index]{'reg_name'}"."$name_ext";print $register_fh ".data_u = (reg_";
        print $register_fh ""."$reg_array[$reg_index]{'reg_name'}"."$name_ext";print $register_fh ".data_u & ~field->mask) \n";
        print $register_fh "    | (field->value << field->offset); \n";
        print $register_fh "} \n";

        # Procedural Blocks For Register Fields
        for ( my $field_index = 1; $field_index <= $#reg_field; $field_index++ ) {
          # New line in Description
          my $cmt_space   = sprintf("%18s", "");
          my $field_des   = $reg_field[$field_index]{'field_des'};
          $field_des      =~ s/\n/\/\/$cmt_space/g;
          
          # Procedural Blocks
          my $reg_field_name = "$reg_array[$reg_index]{'reg_name'}"."$name_ext"."_"."$reg_field[$field_index]{'field_name'}";
          my $proc_name = uc($reg_field_name)."_PROC";
          
        }
      }
      }
    }

    # /** void Get value of a field in register functions *****************************
    print $register_fh "\n";
    print $register_fh "\n";
    print $register_fh "\n";

    print $register_fh "/** void Get value of a field in register functions ***************************** \n";
    print $register_fh "*  Do: - Extract value of a field base on its mask and offset \n";
    print $register_fh "*       - Return its value \n";
    print $register_fh "*/ \n";

# void get_field_uci(RegField *field) {
  # field->value = (reg_uci.data & field->mask) >> field->offset;
# }

    for ( my $reg_index = 1; $reg_index <= $#reg_array; $reg_index++ ) {
      my @reg_field = @{$reg_array[$reg_index]{'reg_field'}};
      my $inst_no   = $reg_array[$reg_index]{'num_inst'};
      my $inst_suffix = $reg_array[$reg_index]{'suffix'};
      
      # New line in Description
      my $cmt_space     = sprintf("%18s", "");
      my $reg_des       = $reg_array[$reg_index]{'reg_des'};
      $reg_des          =~ s/\n/\/\/$cmt_space/g;
      if ( $reg_array[$reg_index]{'reg_name'} =~ /^NA$/ ) {}
      else {

      for ( my $inst_index = 0; $inst_index < $inst_no; $inst_index++) {
        my $name_ext    = ( $inst_no > 1 ) ? "_"."$inst_suffix"."$inst_index" : "";
        # Address of the instance
        my $inst_addr_dec = 0;
        $inst_addr_dec = hex($reg_array[$reg_index]{'reg_addr'}) + 4*$inst_index;
        
        my $inst_addr_hex = uc(sprintf("%03x", $inst_addr_dec));
        

        print $register_fh "void get_field_"; print $register_fh ""."$reg_array[$reg_index]{'reg_name'}"."$name_ext";print $register_fh "(RegField *field) { \n";
        print $register_fh "  field->value = (reg_";
        print $register_fh ""."$reg_array[$reg_index]{'reg_name'}"."$name_ext";print $register_fh ".data_u & field->mask) >> field->offset; \n";
        print $register_fh "} \n";

        # Procedural Blocks For Register Fields
        for ( my $field_index = 1; $field_index <= $#reg_field; $field_index++ ) {
          # New line in Description
          my $cmt_space   = sprintf("%18s", "");
          my $field_des   = $reg_field[$field_index]{'field_des'};
          $field_des      =~ s/\n/\/\/$cmt_space/g;
          
          # Procedural Blocks
          my $reg_field_name = "$reg_array[$reg_index]{'reg_name'}"."$name_ext"."_"."$reg_field[$field_index]{'field_name'}";
          my $proc_name = uc($reg_field_name)."_PROC";
          
        }
      }
      }
    }

# /** Write to registers functions ***********************************
    print $register_fh "\n";
    print $register_fh "\n";
    print $register_fh "\n";

    print $register_fh "/** Write to registers functions *********************************** \n";
    print $register_fh " * Do: Write content of register data to hardware \n";
    print $register_fh "* Note: Call these methods after set register fields \n";
    print $register_fh "*/ \n";
# void write_reg_
    for ( my $reg_index = 1; $reg_index <= $#reg_array; $reg_index++ ) {
      my @reg_field = @{$reg_array[$reg_index]{'reg_field'}};
      my $inst_no   = $reg_array[$reg_index]{'num_inst'};
      my $inst_suffix = $reg_array[$reg_index]{'suffix'};
      
      # New line in Description
      my $cmt_space     = sprintf("%18s", "");
      my $reg_des       = $reg_array[$reg_index]{'reg_des'};
      $reg_des          =~ s/\n/\/\/$cmt_space/g;
      if ( $reg_array[$reg_index]{'reg_name'} =~ /^NA$/ ) {}
      else {

      for ( my $inst_index = 0; $inst_index < $inst_no; $inst_index++) {
        my $name_ext    = ( $inst_no > 1 ) ? "_"."$inst_suffix"."$inst_index" : "";
        # Address of the instance
        my $inst_addr_dec = 0;
        $inst_addr_dec = hex($reg_array[$reg_index]{'reg_addr'}) + 4*$inst_index;
        
        my $inst_addr_hex = uc(sprintf("%03x", $inst_addr_dec));
        

        print $register_fh "void write_reg_"; print $register_fh ""."$reg_array[$reg_index]{'reg_name'}"."$name_ext";print $register_fh "() { \n";
        print $register_fh "  write_reg(ADDR_REG_";
        print $register_fh uc""."$reg_array[$reg_index]{'reg_name'}"."$name_ext";
        print $register_fh ", reg_";print $register_fh ""."$reg_array[$reg_index]{'reg_name'}"."$name_ext";print $register_fh ".data_u);\n";
        print $register_fh "} \n";

        # Procedural Blocks For Register Fields
        for ( my $field_index = 1; $field_index <= $#reg_field; $field_index++ ) {
          # New line in Description
          my $cmt_space   = sprintf("%18s", "");
          my $field_des   = $reg_field[$field_index]{'field_des'};
          $field_des      =~ s/\n/\/\/$cmt_space/g;
          
          # Procedural Blocks
          my $reg_field_name = "$reg_array[$reg_index]{'reg_name'}"."$name_ext"."_"."$reg_field[$field_index]{'field_name'}";
          my $proc_name = uc($reg_field_name)."_PROC";
          
        }
      }
      }
    }


# /** Read from registers functions *****************************************
    print $register_fh "\n";
    print $register_fh "\n";
    print $register_fh "\n";
    print $register_fh "/** Read from registers functions ***************************************** \n";
    print $register_fh " * Do: Read register content from hardware and update it fields \n";
    print $register_fh "* Note: All its fields are ready to use after call these methods \n";
    print $register_fh "*/ \n";
# void read_reg_

    for ( my $reg_index = 1; $reg_index <= $#reg_array; $reg_index++ ) {
      my @reg_field = @{$reg_array[$reg_index]{'reg_field'}};
      my $inst_no   = $reg_array[$reg_index]{'num_inst'};
      my $inst_suffix = $reg_array[$reg_index]{'suffix'};
      # New line in Description
      my $cmt_space     = sprintf("%18s", "");
      my $reg_des       = $reg_array[$reg_index]{'reg_des'};
      $reg_des          =~ s/\n/\/\/$cmt_space/g;
      if ( $reg_array[$reg_index]{'reg_name'} =~ /^NA$/ ) {}
      else {

      for ( my $inst_index = 0; $inst_index < $inst_no; $inst_index++) {
        my $name_ext    = ( $inst_no > 1 ) ? "_"."$inst_suffix"."$inst_index" : "";
        # Address of the instance
        my $inst_addr_dec = 0;
        $inst_addr_dec = hex($reg_array[$reg_index]{'reg_addr'}) + 4*$inst_index;
        my $inst_addr_hex = uc(sprintf("%03x", $inst_addr_dec));
        print $register_fh "void read_reg_"; print $register_fh ""."$reg_array[$reg_index]{'reg_name'}"."$name_ext";print $register_fh "() { \n";
        print $register_fh "  read_reg(ADDR_REG_";print $register_fh uc""."$reg_array[$reg_index]{'reg_name'}"."$name_ext";print $register_fh ", &reg_";print $register_fh ""."$reg_array[$reg_index]{'reg_name'}"."$name_ext";print $register_fh ".data_u);\n";
        # for ( my $field_index = 1; $field_index <= $#reg_field-1; $field_index++ ) {

        for ( my $field_index = 1; $field_index <= $#reg_field; $field_index++ ) {
          my $addr_start = $reg_field[$field_index]{'field_off'};
          my $addr_end   = $reg_field[$field_index]{'field_off'} + $reg_field[$field_index]{'field_width'} - 1;
          my $field_pos  = ($reg_field[$field_index]{'field_width'} > 1) ? "[$addr_end:$addr_start]" : "[$addr_start]";
          if ( $reg_field[$field_index]{'field_name'} =~ /^rfu$/ ) {
            print $register_fh "";
          }
          else {
            print $register_fh "  get_field_";print $register_fh ""."$reg_array[$reg_index]{'reg_name'}"."$name_ext";
            print $register_fh "(&reg_";print $register_fh ""."$reg_array[$reg_index]{'reg_name'}"."$name_ext";
            print $register_fh ".";print $register_fh "$reg_field[$field_index]{'field_name'}";
            print $register_fh "); \n";
          }
        }

        print $register_fh "} \n";
        # Procedural Blocks For Register Fields
        for ( my $field_index = 1; $field_index <= $#reg_field; $field_index++ ) {
          # New line in Description
          my $cmt_space   = sprintf("%18s", "");
          my $field_des   = $reg_field[$field_index]{'field_des'};
          $field_des      =~ s/\n/\/\/$cmt_space/g;
          
          # Procedural Blocks
          my $reg_field_name = "$reg_array[$reg_index]{'reg_name'}"."$name_ext"."_"."$reg_field[$field_index]{'field_name'}";
          my $proc_name = uc($reg_field_name)."_PROC";
          
        }
      }
      }
    }
  

# // Initialize fields offset
    print $register_fh "\n";
    print $register_fh "\n";
    print $register_fh "void initFieldOffset() { \n";

    for ( my $reg_index = 1; $reg_index <= $#reg_array; $reg_index++ ) {
      my @reg_field = @{$reg_array[$reg_index]{'reg_field'}};
      my $inst_no   = $reg_array[$reg_index]{'num_inst'};
      my $inst_suffix = $reg_array[$reg_index]{'suffix'};
      # New line in Description
      my $cmt_space     = sprintf("%18s", "");
      my $reg_des       = $reg_array[$reg_index]{'reg_des'};
      $reg_des          =~ s/\n/\/\/$cmt_space/g;
      if ( $reg_array[$reg_index]{'reg_name'} =~ /^NA$/ ) {}
      else {

      for ( my $inst_index = 0; $inst_index < $inst_no; $inst_index++) {
        my $name_ext    = ( $inst_no > 1 ) ? "_"."$inst_suffix"."$inst_index" : "";
        # Address of the instance
        my $inst_addr_dec = 0;
        $inst_addr_dec = hex($reg_array[$reg_index]{'reg_addr'}) + 4*$inst_index;
        my $inst_addr_hex = uc(sprintf("%03x", $inst_addr_dec));
        
        # for ( my $field_index = 1; $field_index <= $#reg_field-1; $field_index++ ) {
        for ( my $field_index = 1; $field_index <= $#reg_field; $field_index++ ) {
          my $addr_start = $reg_field[$field_index]{'field_off'};
          my $addr_end   = $reg_field[$field_index]{'field_off'} + $reg_field[$field_index]{'field_width'} - 1;
          my $field_pos  = ($reg_field[$field_index]{'field_width'} > 1) ? "[$addr_end:$addr_start]" : "[$addr_start]";
          if ( $reg_field[$field_index]{'field_name'} =~ /^rfu$/ ) {
            print $register_fh "";
          }
          else {
            print $register_fh "reg_"; print $register_fh ""."$reg_array[$reg_index]{'reg_name'}"."$name_ext";print $register_fh ".";
            print $register_fh ""."$reg_field[$field_index]{'field_name'}";
            print $register_fh ".";print $register_fh "offset = ";print $register_fh " $addr_start";
            print $register_fh "; \n";
          }
        }
        
        # Procedural Blocks For Register Fields
        for ( my $field_index = 1; $field_index <= $#reg_field; $field_index++ ) {
          # New line in Description
          my $cmt_space   = sprintf("%18s", "");
          my $field_des   = $reg_field[$field_index]{'field_des'};
          $field_des      =~ s/\n/\/\/$cmt_space/g;
          
          # Procedural Blocks
          my $reg_field_name = "$reg_array[$reg_index]{'reg_name'}"."$name_ext"."_"."$reg_field[$field_index]{'field_name'}";
          my $proc_name = uc($reg_field_name)."_PROC";
          
        }
      }
      }
    }
# // Initialize fields mask
# void initFieldMask() {
    print $register_fh "}\n";
    print $register_fh "\n";
    print $register_fh "\n";
    print $register_fh "// Initialize fields mask \n";
    print $register_fh "void initFieldMask() { \n";


    for ( my $reg_index = 1; $reg_index <= $#reg_array; $reg_index++ ) {
      my @reg_field = @{$reg_array[$reg_index]{'reg_field'}};
      my $inst_no   = $reg_array[$reg_index]{'num_inst'};
      my $inst_suffix = $reg_array[$reg_index]{'suffix'};
      # New line in Description
      my $cmt_space     = sprintf("%18s", "");
      my $reg_des       = $reg_array[$reg_index]{'reg_des'};
      $reg_des          =~ s/\n/\/\/$cmt_space/g;
      
      # reg_uci.cmd_op.mask = 0xF;
      if ( $reg_array[$reg_index]{'reg_name'} =~ /^NA$/ ) {}
      else {

      for ( my $inst_index = 0; $inst_index < $inst_no; $inst_index++) {
        my $name_ext    = ( $inst_no > 1 ) ? "_"."$inst_suffix"."$inst_index" : "";
        # Address of the instance
        my $inst_addr_dec = 0;
        $inst_addr_dec = hex($reg_array[$reg_index]{'reg_addr'}) + 4*$inst_index;
        my $inst_addr_hex = uc(sprintf("%03x", $inst_addr_dec));
        
        # for ( my $field_index = 1; $field_index <= $#reg_field-1; $field_index++ ) {
        for ( my $field_index = 1; $field_index <= $#reg_field; $field_index++ ) {
          my $addr_start = $reg_field[$field_index]{'field_off'};
          my $addr_end   = $reg_field[$field_index]{'field_off'} + $reg_field[$field_index]{'field_width'} - 1;
          my $field_pos  = ($reg_field[$field_index]{'field_width'} > 1) ? "[$addr_end:$addr_start]" : "[$addr_start]";
          my $num0 = (32 - $reg_field[$field_index]{'field_off'} - $reg_field[$field_index]{'field_width'});
          my $num1 =  $reg_field[$field_index]{'field_width'};
          my $num0_1 = $reg_field[$field_index]{'field_off'};
          my $mask = 0;
          for ( my $num0_index = 1; $num0_index <= $num0; $num0_index++ ) {
            $mask = "$mask"."0"
          }
          for ( my $num1_index = 1; $num1_index <= $num1; $num1_index++ ) {
            $mask = "$mask"."1"
          }
          for ( my $num0_1_index = 1; $num0_1_index <= $num0_1; $num0_1_index++ ) {
            $mask = "$mask"."0"
          }
          my $mask_hex = sprintf("%x",oct("0b$mask"));
          # print $register_fh "$mask_hex \n";
          if ( $reg_field[$field_index]{'field_name'} =~ /^rfu$/ ) {
            print $register_fh "";
          }
          else {
            print $register_fh "  reg_"; print $register_fh ""."$reg_array[$reg_index]{'reg_name'}"."$name_ext";print $register_fh ".";
            print $register_fh ""."$reg_field[$field_index]{'field_name'}";
            print $register_fh ".";print $register_fh "mask = 0x";print $register_fh "$mask_hex";
            print $register_fh "; \n";
          }

        }
        # Procedural Blocks For Register Fields
        for ( my $field_index = 1; $field_index <= $#reg_field; $field_index++ ) {
          # New line in Description
          my $cmt_space   = sprintf("%18s", "");
          my $field_des   = $reg_field[$field_index]{'field_des'};
          $field_des      =~ s/\n/\/\/$cmt_space/g;
          
          # Procedural Blocks
          my $reg_field_name = "$reg_array[$reg_index]{'reg_name'}"."$name_ext"."_"."$reg_field[$field_index]{'field_name'}";
          my $proc_name = uc($reg_field_name)."_PROC";
          
        }
      }
      }
    }
    print $register_fh "} \n";



# // Initialize fields value
# void initFieldValue() {


  # set_field_uci(&reg_uci.cmd_op, 0x0);

    print $register_fh "\n";
    print $register_fh "\n";
    print $register_fh "// Initialize fields value \n";
    print $register_fh "void initFieldValue() { \n";
    for ( my $reg_index = 1; $reg_index <= $#reg_array; $reg_index++ ) {
      my @reg_field = @{$reg_array[$reg_index]{'reg_field'}};
      my $inst_no   = $reg_array[$reg_index]{'num_inst'};
      my $inst_suffix = $reg_array[$reg_index]{'suffix'};
      # New line in Description
      my $cmt_space     = sprintf("%18s", "");
      my $reg_des       = $reg_array[$reg_index]{'reg_des'};
      $reg_des          =~ s/\n/\/\/$cmt_space/g;
      if ( $reg_array[$reg_index]{'reg_name'} =~ /^NA$/ ) {}
      else {
        
      for ( my $inst_index = 0; $inst_index < $inst_no; $inst_index++) {
        my $name_ext    = ( $inst_no > 1 ) ? "_"."$inst_suffix"."$inst_index" : "";
        # Address of the instance
        my $inst_addr_dec = 0;
        $inst_addr_dec = hex($reg_array[$reg_index]{'reg_addr'}) + 4*$inst_index;
        my $inst_addr_hex = uc(sprintf("%03x", $inst_addr_dec));
        
        # for ( my $field_index = 1; $field_index <= $#reg_field-1; $field_index++ ) {
        for ( my $field_index = 1; $field_index <= $#reg_field; $field_index++ ) {
          my $addr_start = $reg_field[$field_index]{'field_off'};
          my $addr_end   = $reg_field[$field_index]{'field_off'} + $reg_field[$field_index]{'field_width'} - 1;
          my $field_pos  = ($reg_field[$field_index]{'field_width'} > 1) ? "[$addr_end:$addr_start]" : "[$addr_start]";

          if ( $reg_field[$field_index]{'field_name'} =~ /^rfu$/ ) {
            print $register_fh "";
          }
          else {
            print $register_fh "  set_field_"; print $register_fh ""."$reg_array[$reg_index]{'reg_name'}"."$name_ext";
            print $register_fh "(&reg_"."$reg_array[$reg_index]{'reg_name'}"."$name_ext".".";print $register_fh ""."$reg_field[$field_index]{'field_name'}";
            print $register_fh ", ";

            if ($reg_field[$field_index]{'field_reset'} =~ /\'h/ ){
               my @words1 = split (/h/, $reg_field[$field_index]{'field_reset'});
               print $register_fh "0x"."$words1[1]";

            }
            elsif ($reg_field[$field_index]{'field_reset'} =~ /\'b/ ){
               my @words1 = split (/b/, $reg_field[$field_index]{'field_reset'});
               my $hex_temp = sprintf("%x",oct("0b$words1[1]"));
               print $register_fh "0x"."$hex_temp";
            }
            elsif ($reg_field[$field_index]{'field_reset'} =~ /\'d/ ){
               my @words1 = split (/b/, $reg_field[$field_index]{'field_reset'});
               my $hexvalue = sprintf("%X", $words1[1]);  ## gives C8
              print $register_fh "0x"."$hexvalue";
            } 
            elsif ($reg_field[$field_index]{'field_reset'} =~ /\'1/ ){
             # my $left = $reg_array[$reg_index]{'field_width'};
             my $left = $reg_field[$field_index]{'field_width'}; 
           #   print "reg_"."$reg_array[$reg_index]{'reg_name'}"."$name_ext"."eskdjskj "."$left"."\n";
               my $value_tem = (1 << $left)- 1;
            #  print "aaaaaaaaaaaaaaaaa "."$value_tem"." \n";
              print $register_fh "$value_tem";
            }

             else {
              print $register_fh "$reg_field[$field_index]{'field_reset'}";
             }
            


            print $register_fh "); \n";
          }
        }
        # Procedural Blocks For Register Fields
        for ( my $field_index = 1; $field_index <= $#reg_field; $field_index++ ) {
          # New line in Description
          my $cmt_space   = sprintf("%18s", "");
          my $field_des   = $reg_field[$field_index]{'field_des'};
          $field_des      =~ s/\n/\/\/$cmt_space/g;
          
          # Procedural Blocks
          my $reg_field_name = "$reg_array[$reg_index]{'reg_name'}"."$name_ext"."_"."$reg_field[$field_index]{'field_name'}";
          my $proc_name = uc($reg_field_name)."_PROC";
          
        }
      }
      }
    }


    print $register_fh "} \n";






    # print $register_fh "\n", "//Finish RENAME REG";
    
    print "Generating register: Done!\n";
    close($register_fh);
  }






#------------------------------------------------------------------------#
# printHeader Functions
#------------------------------------------------------------------------#
  # Print Sheet Information
  # Parameters:
  #   $_[0]: File Handle
  #   $_[1]: File Name
  #   $_[2]: File Brief Desciption
  # Return:
  #   None
  sub printHeader (@) {
    #get data from argument
    my $FileHandle = $_[0];
    my $filename = $_[1];
    my $brief = $_[2];
    
    #print header to RTl file
    print $FileHandle "//-----------------------------------------------------------------------------\n";
    print $FileHandle "//    Copyright (C) 2019 by Dolphin Technology\n";
    print $FileHandle "//    Created: ",&getDate, "\n";
    print $FileHandle "//------------------------------------------------------------------------------\n";
  }
#------------------------------------------------------------------------#
# getDate Function
#------------------------------------------------------------------------#
  # Get Date
  # Parameters:
  #   None
  # Return:
  #   Date
  sub getDate {
    my $date_time_return ="";
    my ($sec,$min,$hour,$mday,$mon,$year,$wday,$yday,$isdst) = localtime(time);
    $year += 1900;
    my @mon_abrr = qw( Jan Feb Mar Apr May Jun Jul Aug Sep Oct Nov Dec );
    my $day = "";
    if (($mday == 1)||($mday == 21)||($mday == 31)) {
        $day = $mday .'st';
    }
    elsif (($mday == 2)||($mday == 22)) {
        $day = $mday .'nd';
    }
    elsif (($mday == 3)||($mday == 23)) {
        $day = $mday .'rd';
    }
    else {
        $day = $mday .'th';
    }

    $date_time_return = $hour. ":".$min.":".$sec."  ".$mon_abrr[$mon] ." " .$day ." " .$year;

    return $date_time_return;
  }

#------------------------------------------------------------------------#
# printSpace Function
#------------------------------------------------------------------------#
  sub printSpace (@) {
    my $num_space = $_[0];
    my $fileHandle = $_[1];
    for (my $i = 0; $i < $num_space; $i++) {
      print $fileHandle " ";
    }
  }
